var documenterSearchIndex = {"docs":
[{"location":"#SpectralKit","page":"SpectralKit","title":"SpectralKit","text":"","category":"section"},{"location":"","page":"SpectralKit","title":"SpectralKit","text":"This is a very simple package for building blocks of spectral methods. Its intended audience is users who are familiar with the theory and practice of these methods, and prefer to assemble their code from modular building blocks.","category":"page"},{"location":"","page":"SpectralKit","title":"SpectralKit","text":"The following provides an overview of the interface for univariate function families on various domains:","category":"page"},{"location":"","page":"SpectralKit","title":"SpectralKit","text":"using SpectralKit\nbasis = univariate_basis(Chebyshev(5), # Chebyshev polynomials on [0,2]\n                         BoundedLinear(0, 2))\nis_function_basis(basis) # tells us that we support the interface below\ndimension(basis) # number of basis functions\ndomain(basis) # endpoints \ngrid(basis, InteriorGrid()) # Gauss-Chebyshev grid\ngrid(basis, EndpointGrid()) # Gauss-Lobatto grid\ncollect(basis_at(F, 0.41)) # iterator for basis functions at 0.41\nθ = [1 0.5 0.2 0.3 0.001] # a vector of coefficients\nlinear_combination(basis, θ, 0.41) # combination at some value\nlinear_combination(basis, θ)(0.41) # also as a callable","category":"page"},{"location":"#Abstract-interface-for-function-families","page":"SpectralKit","title":"Abstract interface for function families","text":"","category":"section"},{"location":"#Bases-generics","page":"SpectralKit","title":"Bases generics","text":"","category":"section"},{"location":"","page":"SpectralKit","title":"SpectralKit","text":"is_function_basis\ndimension\ndomain","category":"page"},{"location":"#SpectralKit.is_function_basis","page":"SpectralKit","title":"SpectralKit.is_function_basis","text":"is_function_basis(F)\n\nis_function_basis(f::F)\n\nTest if the argument is a function basis, supporting the following interface:\n\ndomain for querying the domain,\ndimension for the dimension,\nbasis_at for function evaluation,\ngrid to obtain collocation points.\n\nCan be used on both types (preferred) and values (for convenience).\n\n\n\n\n\n","category":"function"},{"location":"#SpectralKit.dimension","page":"SpectralKit","title":"SpectralKit.dimension","text":"dimension(basis)\n\nReturn the dimension of basis, a positive Int.\n\n\n\n\n\n","category":"function"},{"location":"#SpectralKit.domain","page":"SpectralKit","title":"SpectralKit.domain","text":"domain(basis)\n\nThe domain of a function basis. Can be an arbitrary object, but has to be constant.\n\n\n\n\n\n","category":"function"},{"location":"#Evaluation","page":"SpectralKit","title":"Evaluation","text":"","category":"section"},{"location":"","page":"SpectralKit","title":"SpectralKit","text":"basis_at\nlinear_combination","category":"page"},{"location":"#SpectralKit.basis_at","page":"SpectralKit","title":"SpectralKit.basis_at","text":"basis_at(basis, x)\n\nReturn an iterable with known element type and length (Base.HasEltype(), Base.HasLength()) of basis functions in basis evaluated at x.\n\nMethods are type stable.\n\nnote: Note\nConsequences are undefined when evaluating outside the domain.\n\n\n\n\n\n","category":"function"},{"location":"#SpectralKit.linear_combination","page":"SpectralKit","title":"SpectralKit.linear_combination","text":"linear_combination(basis, θ, x)\n\n\nEvaluate the linear combination of  θₖfₖ(x) of function basis f₁  at x, for the given order.\n\nThe length of θ should equal dimension(θ).\n\n\n\n\n\nlinear_combination(basis, θ)\n\n\nReturn a callable that calculates linear_combination(basis, θ, x) when called with x.\n\n\n\n\n\n","category":"function"},{"location":"#Grids-and-collocation","page":"SpectralKit","title":"Grids and collocation","text":"","category":"section"},{"location":"","page":"SpectralKit","title":"SpectralKit","text":"grid\nInteriorGrid\nEndpointGrid\ncollocation_matrix","category":"page"},{"location":"#SpectralKit.grid","page":"SpectralKit","title":"SpectralKit.grid","text":"grid([T], basis, kind)\n\nReturn a grid the given kind, recommended for collocation, with dimension(basis) elements.\n\nT is used as a hint for the element type of grid coordinates, and defaults to Float64. The actual type can be broadened as required. Methods are type stable.\n\n\n\n\n\n","category":"function"},{"location":"#SpectralKit.InteriorGrid","page":"SpectralKit","title":"SpectralKit.InteriorGrid","text":"struct InteriorGrid\n\nGrid with interior points (eg Gauss-Chebyshev).\n\n\n\n\n\n","category":"type"},{"location":"#SpectralKit.EndpointGrid","page":"SpectralKit","title":"SpectralKit.EndpointGrid","text":"struct EndpointGrid\n\nGrid that includes endpoints (eg Gauss-Lobatto).\n\n\n\n\n\n","category":"type"},{"location":"#SpectralKit.collocation_matrix","page":"SpectralKit","title":"SpectralKit.collocation_matrix","text":"collocation_matrix(basis, x)\n\n\nConvenience function to obtain a collocation matrix at gridpoints x, which is assumed to have a concrete eltype.\n\nMethods are type stable.\n\n\n\n\n\n","category":"function"},{"location":"#Specific-function-families","page":"SpectralKit","title":"Specific function families","text":"","category":"section"},{"location":"#Building-blocks","page":"SpectralKit","title":"Building blocks","text":"","category":"section"},{"location":"","page":"SpectralKit","title":"SpectralKit","text":"Chebyshev","category":"page"},{"location":"#SpectralKit.Chebyshev","page":"SpectralKit","title":"SpectralKit.Chebyshev","text":"struct Chebyshev <: SpectralKit.FunctionBasis\n\nThe first N Chebyhev polynomials of the first kind, defined on [-1,1].\n\n\n\n\n\n","category":"type"},{"location":"#Transformations","page":"SpectralKit","title":"Transformations","text":"","category":"section"},{"location":"","page":"SpectralKit","title":"SpectralKit","text":"univariate_basis\nBoundedLinear\nInfRational\nSemiInfRational","category":"page"},{"location":"#SpectralKit.univariate_basis","page":"SpectralKit","title":"SpectralKit.univariate_basis","text":"univariate_basis(parent, transformation)\n\n\nCreate a univariate basis from parent, transforming the domain with transformation.\n\nparent is a univariate basis, transformation is a univariate transformation (supporting the interface described by UnivariateTransformation, but not necessarily a subtype).\n\nExample\n\nThe following is a basis with 10 transformed Chebyshev polynomials of the first kind on (3), with equal amounts of nodes on both sides of 7 = 3 + 4:\n\nunivariate_basis(Chebyshev(10), SemiInfRational(3.0, 4.0))\n\n\n\n\n\n","category":"function"},{"location":"#SpectralKit.BoundedLinear","page":"SpectralKit","title":"SpectralKit.BoundedLinear","text":"struct BoundedLinear{T<:Real} <: SpectralKit.UnivariateTransformation\n\nTransform x ∈ (-1,1) to y ∈ (a, b), using y = x  s + m.\n\nm and s are calculated and checked by the constructor; a < b is enforced.\n\n\n\n\n\n","category":"type"},{"location":"#SpectralKit.InfRational","page":"SpectralKit","title":"SpectralKit.InfRational","text":"struct InfRational{T<:Real} <: SpectralKit.UnivariateTransformation\n\nChebyshev polynomials transformed to the domain (-Inf, Inf) using y = A + L  x  (1 - x^2), with L > 0.\n\n0 is mapped to A.\n\n\n\n\n\n","category":"type"},{"location":"#SpectralKit.SemiInfRational","page":"SpectralKit","title":"SpectralKit.SemiInfRational","text":"SemiInfRational(A, L)\n\n\n[-1,1] transformed to the domain [A, Inf) (when L > 0) or (-Inf,A] (when L < 0) using y = A + L  (1 + x)  (1 - x).\n\nWhen used with Chebyshev polynomials, also known as a “rational Chebyshev” basis.\n\n\n\n\n\n","category":"type"},{"location":"#Simplified-API-for-adding-custom-transformations","page":"SpectralKit","title":"Simplified API for adding custom transformations","text":"","category":"section"},{"location":"","page":"SpectralKit","title":"SpectralKit","text":"SpectralKit.UnivariateTransformation\nSpectralKit.to_domain\nSpectralKit.from_domain","category":"page"},{"location":"#SpectralKit.UnivariateTransformation","page":"SpectralKit","title":"SpectralKit.UnivariateTransformation","text":"abstract type UnivariateTransformation\n\nAn abstract type for univariate transformations. Transformations are not required to be subtypes, this just documents the interface they need to support:\n\nto_domain\nfrom_domain\n\n\n\n\n\n","category":"type"},{"location":"#SpectralKit.to_domain","page":"SpectralKit","title":"SpectralKit.to_domain","text":"to_domain(transformation, parent, x)\n\n!!! FIXME     document, especially differentiability requirements at infinite endpoints\n\n\n\n\n\n","category":"function"},{"location":"#SpectralKit.from_domain","page":"SpectralKit","title":"SpectralKit.from_domain","text":"from_domain(transformation, parent, x)\n\n!!! FIXME     document, especially differentiability requirements at infinite endpoints\n\n\n\n\n\n","category":"function"}]
}
